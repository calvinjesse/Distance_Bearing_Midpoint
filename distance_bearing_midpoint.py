# -*- coding: utf-8 -*-
"""Distance_Bearing_Midpoint.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1uDPeoo9-677Miz4nVJY-W9YDzrOhekx-
"""

import math
import numpy as np
import time

def main(lat1, lon1, lat2, lon2):
  print("long-lat 1 : ",lat1,",",lon1)
  print("long-lat 2 : ",lat2,",",lon2)
  print("\n")
  distance(lat1, lon1, lat2, lon2)
  bearing(lat1, lon1, lat2, lon2)
  midpoint(lat1, lon1, lat2, lon2)

def distance(lat1, lon1, lat2, lon2):
  r = 6371

  lat_dis = ((lat2-lat1)/2)*np.pi/180
  lon_dis = ((lon2-lon1)/2)*np.pi/180
  lat1y = lat1*np.pi/180
  lat2y = lat2*np.pi/180

  sin_lat = (np.sin(lat_dis))**2
  sin_lon = (np.sin(lon_dis))**2

  root = np.sqrt(sin_lat + (np.cos(lat1y)*np.cos(lat2y)*sin_lon))

  dis = 2*r*np.arcsin(root)

  print("distance : ",dis,"KM")
  
def bearing(lat1, lon1, lat2, lon2):
  lon1x = lon1*np.pi/180
  lat1x = lat1*np.pi/180
  lon2x = lon2*np.pi/180
  lat2x = lat2*np.pi/180
  lon_dif = lon2x-lon1x

  y = np.sin(lon_dif)*np.cos(lat2x)
  x = (np.cos(lat1x)*np.sin(lat2x))-(np.sin(lat1x)*np.cos(lat2x)*np.cos(lon_dif))

  bear = math.atan2(y,x)
  bear_deg = (math.degrees(bear))%180
  print("bearing : ",bear_deg,"degrees")

def midpoint(lat1, lon1, lat2, lon2):
  lon1z = lon1*np.pi/180
  lat1z = lat1*np.pi/180
  lon2z = lon2*np.pi/180
  lat2z = lat2*np.pi/180

  
  Bx = np.cos(lat2z)*np.cos(lat2z-lat1z)
  By = np.cos(lat2z)*np.sin(lat2z-lat1z)
  sqrt = np.sqrt((np.cos(lat1z)+Bx)**2+(By)**2)
  lat_mid = math.atan2((np.sin(lat1z)+np.sin(lat2z)),sqrt)
  lon_mid = lon1z + math.atan2(By,(np.cos(lat1)+Bx)) 

  print("midpoint : ",math.degrees(lat_mid),",",math.degrees(lon_mid))

start_time = time.time()
main(-6.226911159033516,106.83278809486478,-6.2417112557259,106.8366322700035)
print("\n--- %s seconds ---" % (time.time() - start_time))